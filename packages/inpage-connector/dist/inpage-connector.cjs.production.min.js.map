{"version":3,"file":"inpage-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { AbstractConnector } from '@meta-wallets-kit/abstract-connector';\r\nimport {\r\n  DefaultConnectionPayload,\r\n  DisconnectCallback,\r\n  SubscribedObject,\r\n} from '@meta-wallets-kit/types';\r\n\r\nimport { InpageProvider } from './@types/extend-window';\r\n\r\nexport { InpageProvider };\r\n\r\nexport interface InpageConnectionPayload extends DefaultConnectionPayload {\r\n  provider: InpageProvider;\r\n}\r\n\r\nexport class InpageConnector extends AbstractConnector<InpageConnectionPayload> {\r\n  public async connect(): Promise<InpageConnectionPayload> {\r\n    let provider: InpageProvider = window.ethereum || window.web3?.currentProvider;\r\n\r\n    // edge case if Metamask and Coinbase extensions are both installed\r\n    if (Array.isArray(provider?.providers)) {\r\n      provider = provider.providers.find((x: InpageProvider) => x.isMetaMask) || provider;\r\n    }\r\n\r\n    if (!provider) {\r\n      throw new Error(\r\n        'Web3 provider not found! Please install the Web3 extension (e.g. Metamask) or use the Web3 browser (e.g. TrustWallet on your mobile device).',\r\n      );\r\n    }\r\n\r\n    if (provider.enable) {\r\n      await provider.enable();\r\n    }\r\n\r\n    this.payload = {\r\n      provider,\r\n    };\r\n\r\n    return this.payload;\r\n  }\r\n\r\n  public subscribeDisconnect(callback: DisconnectCallback): SubscribedObject {\r\n    return super.subscribeDisconnect((error?: any) => {\r\n      const isRecoverableMetamaskDisconnection =\r\n        this.payload?.provider?.isMetaMask && error?.code === 1013;\r\n      !isRecoverableMetamaskDisconnection && callback(error);\r\n    });\r\n  }\r\n}\r\n"],"names":["_AbstractConnector","InpageConnector","apply","arguments","_proto","prototype","connect","_connect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_window$web","_provider","provider","wrap","_context","prev","next","window","ethereum","web3","currentProvider","Array","isArray","providers","find","x","isMetaMask","Error","enable","this","payload","abrupt","stop","subscribeDisconnect","callback","call","error","_this$payload","_this","_this$payload$provide","code","AbstractConnector"],"mappings":"shOAe6BA,WAAA,SAAAC,IAAA,OAAAD,EAAAE,WAAAC,mBAAAH,KAAAC,yEAAA,IAAAG,EAAAH,EAAAI,UAgC1B,OAhC0BD,EACdE,mBAAO,IAAAC,EAAAC,EAAAC,IAAAC,MAAb,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAL,IAAAM,eAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAMJ,GALGJ,EAA2BK,OAAOC,kBAAQR,EAAIO,OAAOE,aAAPT,EAAaU,iBAG3DC,MAAMC,eAAOX,EAACC,UAAAD,EAAUY,aAC1BX,EAAWA,EAASW,UAAUC,MAAK,SAACC,GAAiB,OAAKA,EAAEC,eAAed,GAGxEA,GAAQE,EAAAE,OAAA,MAAA,MACL,IAAIW,MACR,gJACD,OAAA,IAGCf,EAASgB,QAAMd,EAAAE,OAAA,MAAA,OAAAF,EAAAE,OACXJ,EAASgB,SAAQ,OAKvB,OAFFC,KAAKC,QAAU,CACblB,SAAAA,GACAE,EAAAiB,gBAEKF,KAAKC,SAAO,OAAA,UAAA,OAAAhB,EAAAkB,UAAAvB,YACpB,OAAA,WAAA,OAAAJ,EAAAL,WAAAC,eAAAC,EAEM+B,oBAAA,SAAoBC,cACzB,OAAApC,EAAAK,UAAa8B,oBAAmBE,WAAC,SAACC,qBAE9BC,EAAAC,EAAKR,iBAAOS,EAAZF,EAAczB,iBAAd2B,EAAwBb,aAA8B,cAAhBU,SAAAA,EAAOI,QACRN,EAASE,OAEnDrC,GAhCkC0C"}