{"code":"import './@types';\r\n//# sourceMappingURL=index.js.map","references":["E:/metawallet/meta-wallets-kit/packages/types/src/@types/index.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,UAAU,CAAC\"}","dts":{"name":"E:/metawallet/meta-wallets-kit/packages/types/index.d.ts","writeByteOrderMark":false,"text":"import './@types';\r\nimport type { Provider } from '@meta-wallets-kit/for-third-library-definitions';\r\nexport { Provider };\r\ndeclare type MaybePromise<T> = T | Promise<T>;\r\nexport interface DefaultConnectionPayload {\r\n    provider: Provider;\r\n}\r\nexport interface Connector<P extends DefaultConnectionPayload = DefaultConnectionPayload> {\r\n    connect(): MaybePromise<P>;\r\n    disconnect(): MaybePromise<void>;\r\n    getAccount(): Promise<string | null>;\r\n    getChainId(): Promise<number | null>;\r\n    getConnectionPayload(): P | null;\r\n    subscribeConnectAccount(callback: ConnectCallback): SubscribedObject;\r\n    subscribeChainId(callback: ChainIdCallback): SubscribedObject;\r\n    subscribeDisconnect(callback: DisconnectCallback): SubscribedObject;\r\n}\r\nexport declare type SubscribedObject = {\r\n    unsubscribe: () => void;\r\n};\r\nexport declare type ConnectCallback = (account: string) => void;\r\nexport declare type ChainIdCallback = (chainId: number) => void;\r\nexport declare type DisconnectCallback = (error?: any) => void;\r\n"}}
