{"code":"const isProduction = process.env.NODE_ENV === 'production';\r\nexport function warning(message) {\r\n    if (!isProduction) {\r\n        console.warn(message);\r\n    }\r\n}\r\nexport function invariant(condition, message) {\r\n    if (!condition) {\r\n        throw new Error(`Invariant failed${isProduction || !message ? '.' : `: ${message}`}`);\r\n    }\r\n}\r\nexport async function getAccount(provider, sendingInterface) {\r\n    const { result: account, sendingInterface: nextInterface } = await send(provider, 'eth_accounts', (accounts) => accounts[0] || null, sendingInterface);\r\n    return { account, sendingInterface: nextInterface };\r\n}\r\nexport async function getChainId(provider, sendingInterface) {\r\n    const { result: chainId, sendingInterface: nextInterface } = await send(provider, 'eth_chainId', (id) => {\r\n        if (!id) {\r\n            throw new Error('ChainId is not found');\r\n        }\r\n        return Number(id);\r\n    }, sendingInterface);\r\n    return { chainId, sendingInterface: nextInterface };\r\n}\r\nasync function send(provider, method, convert, sendingInterface) {\r\n    if (sendingInterface !== 'Old Web3.js') {\r\n        try {\r\n            const sendResult = await provider.send(method);\r\n            const result = convert(isJsonRPCResponse(sendResult) ? sendResult.result : sendResult);\r\n            return { result, sendingInterface: 'EIP 1193' };\r\n        }\r\n        catch {\r\n            warning('EIP 1193 sending failed, trying to old Web3.js sending interface');\r\n        }\r\n    }\r\n    const result = await new Promise((resolve, reject) => {\r\n        (provider.sendAsync || provider.send).call(provider, { method }, (err, sendResult) => {\r\n            err && reject(err);\r\n            resolve(convert(sendResult?.result));\r\n        });\r\n    });\r\n    return { result, sendingInterface: 'Old Web3.js' };\r\n}\r\nconst isJsonRPCResponse = (response) => {\r\n    return typeof response === 'object' && 'jsonrpc' in response && 'result' in response;\r\n};\r\n//# sourceMappingURL=index.js.map","references":["E:/metawallet/meta-wallets-kit/packages/types/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"AAEA,MAAM,YAAY,GAAY,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,CAAC;AAEpE,MAAM,UAAU,OAAO,CAAC,OAAe;IACrC,IAAI,CAAC,YAAY,EAAE;QACjB,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACvB;AACH,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,SAAc,EAAE,OAAgB;IACxD,IAAI,CAAC,SAAS,EAAE;QACd,MAAM,IAAI,KAAK,CAAC,mBAAmB,YAAY,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,OAAO,EAAE,EAAE,CAAC,CAAC;KACvF;AACH,CAAC;AAID,MAAM,CAAC,KAAK,UAAU,UAAU,CAC9B,QAAkB,EAClB,gBAAmC;IAEnC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,aAAa,EAAE,GAAG,MAAM,IAAI,CACrE,QAAQ,EACR,cAAc,EACd,CAAC,QAAkB,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3C,gBAAgB,CACjB,CAAC;IACF,OAAO,EAAE,OAAO,EAAE,gBAAgB,EAAE,aAAa,EAAE,CAAC;AACtD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,UAAU,CAC9B,QAAkB,EAClB,gBAAmC;IAEnC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,aAAa,EAAE,GAAG,MAAM,IAAI,CACrE,QAAQ,EACR,aAAa,EACb,CAAC,EAAmB,EAAE,EAAE;QACtB,IAAI,CAAC,EAAE,EAAE;YACP,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;SACzC;QAED,OAAO,MAAM,CAAC,EAAE,CAAC,CAAC;IACpB,CAAC,EACD,gBAAgB,CACjB,CAAC;IACF,OAAO,EAAE,OAAO,EAAE,gBAAgB,EAAE,aAAa,EAAE,CAAC;AACtD,CAAC;AAED,KAAK,UAAU,IAAI,CACjB,QAAkB,EAClB,MAAc,EACd,OAA0B,EAC1B,gBAAmC;IAEnC,IAAI,gBAAgB,KAAK,aAAa,EAAE;QACtC,IAAI;YACF,MAAM,UAAU,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC/C,MAAM,MAAM,GAAG,OAAO,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;YACvF,OAAO,EAAE,MAAM,EAAE,gBAAgB,EAAE,UAAU,EAAE,CAAC;SACjD;QAAC,MAAM;YACN,OAAO,CAAC,kEAAkE,CAAC,CAAC;SAC7E;KACF;IAED,MAAM,MAAM,GAAM,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACtD,CAAC,QAAQ,CAAC,SAAS,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CACxC,QAAQ,EACR,EAAE,MAAM,EAAE,EACV,CAAC,GAAQ,EAAE,UAAe,EAAE,EAAE;YAC5B,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC;YACnB,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;QACvC,CAAC,CACF,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,OAAO,EAAE,MAAM,EAAE,gBAAgB,EAAE,aAAa,EAAE,CAAC;AACrD,CAAC;AAED,MAAM,iBAAiB,GAAG,CAAC,QAAa,EAA+B,EAAE;IACvE,OAAO,OAAO,QAAQ,KAAK,QAAQ,IAAI,SAAS,IAAI,QAAQ,IAAI,QAAQ,IAAI,QAAQ,CAAC;AACvF,CAAC,CAAC\"}","dts":{"name":"E:/metawallet/meta-wallets-kit/packages/utils/index.d.ts","writeByteOrderMark":false,"text":"import { Provider } from '@meta-wallets-kit/types';\r\nexport declare function warning(message: string): void;\r\nexport declare function invariant(condition: any, message?: string): asserts condition;\r\nexport declare type SendingInterface = 'EIP 1193' | 'Old Web3.js';\r\nexport declare function getAccount(provider: Provider, sendingInterface?: SendingInterface): Promise<{\r\n    account: string | null;\r\n    sendingInterface: SendingInterface;\r\n}>;\r\nexport declare function getChainId(provider: Provider, sendingInterface?: SendingInterface): Promise<{\r\n    chainId: number;\r\n    sendingInterface: SendingInterface;\r\n}>;\r\n"}}
