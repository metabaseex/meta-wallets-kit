{"version":3,"file":"core.cjs.production.min.js","sources":["../src/Web3WalletsManager/index.ts"],"sourcesContent":["import { BehaviorSubject } from 'rxjs';\r\nimport * as Web3ProvidersWs from 'web3-providers-ws';\r\nimport * as Web3ProvidersHttp from 'web3-providers-http';\r\nimport { Connector, Provider, SubscribedObject } from '@meta-wallets-kit/types';\r\n\r\nimport { ConnectResult, ConnectionStatus } from './types';\r\n\r\nexport * from './types';\r\n\r\nconst WebsocketProvider = (Web3ProvidersWs as unknown) as typeof Web3ProvidersWs.WebsocketProvider;\r\nconst HttpProvider = (Web3ProvidersHttp as unknown) as typeof Web3ProvidersHttp.HttpProvider;\r\n\r\ntype WebsocketProviderOptions = ConstructorParameters<typeof WebsocketProvider>[1];\r\ntype HttpProviderOptions = ConstructorParameters<typeof HttpProvider>[1];\r\n\r\ntype InfuraNetwork = 'rinkeby' | 'kovan' | 'mainnet' | 'ropsten' | 'goerli';\r\n\r\ninterface Options<W> {\r\n  defaultProvider: OptionsOfDefaultProvider;\r\n  makeWeb3(provider: Provider): W;\r\n}\r\n\r\ntype OptionsOfDefaultProvider =\r\n  | {\r\n      httpRpcUrl: string;\r\n      options?: HttpProviderOptions;\r\n    }\r\n  | {\r\n      wsRpcUrl: string;\r\n      options?: WebsocketProviderOptions;\r\n    }\r\n  | {\r\n      infuraAccessToken: string;\r\n      /** default: 'mainnet' */\r\n      network?: InfuraNetwork;\r\n      options?: WebsocketProviderOptions;\r\n    };\r\n\r\nexport class Web3WalletsManager<W> {\r\n  public web3: W;\r\n  public txWeb3 = new BehaviorSubject<W | null>(null);\r\n  public account = new BehaviorSubject<string | null>(null);\r\n  public chainId = new BehaviorSubject<number | null>(null);\r\n  public status = new BehaviorSubject<ConnectionStatus>('disconnected');\r\n\r\n  private options: Options<W>;\r\n  private activeConnector: Connector | null = null;\r\n  private accountSubscription: SubscribedObject | null = null;\r\n  private chainIdSubscription: SubscribedObject | null = null;\r\n  private disconnectSubscription: SubscribedObject | null = null;\r\n\r\n  constructor(options: Options<W>) {\r\n    this.options = {\r\n      ...options,\r\n      defaultProvider: {\r\n        network: 'mainnet',\r\n        ...options.defaultProvider,\r\n      },\r\n    };\r\n    this.checkOptions();\r\n    this.web3 = options.makeWeb3(this.getDefaultProvider());\r\n\r\n    this.connect = this.connect.bind(this);\r\n    this.disconnect = this.disconnect.bind(this);\r\n\r\n    this.handleAccountChange = this.handleAccountChange.bind(this);\r\n    this.handleChainIdChange = this.handleChainIdChange.bind(this);\r\n    this.handleDisconnect = this.handleDisconnect.bind(this);\r\n  }\r\n\r\n  public async connect(connector: Connector): Promise<ConnectResult> {\r\n    await this.disconnect();\r\n\r\n    this.activeConnector = connector;\r\n    const { makeWeb3 } = this.options;\r\n\r\n    try {\r\n      this.status.next('pending');\r\n\r\n      const { provider } = await connector.connect();\r\n\r\n      const web3 = makeWeb3(provider);\r\n      this.txWeb3.next(web3);\r\n\r\n      const account = await getAccount(connector);\r\n      this.account.next(account);\r\n\r\n      const chainId = await getChainId(connector);\r\n      this.chainId.next(chainId);\r\n\r\n      this.accountSubscription = connector.subscribeConnectAccount(this.handleAccountChange);\r\n      this.chainIdSubscription = connector.subscribeChainId(this.handleChainIdChange);\r\n      this.disconnectSubscription = connector.subscribeDisconnect(this.handleDisconnect);\r\n\r\n      this.status.next('connected');\r\n\r\n      return { provider, account, chainId };\r\n    } catch (error) {\r\n      this.disconnect();\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public async disconnect() {\r\n    try {\r\n      this.accountSubscription && this.accountSubscription.unsubscribe();\r\n      this.chainIdSubscription && this.chainIdSubscription.unsubscribe();\r\n      this.disconnectSubscription && this.disconnectSubscription.unsubscribe();\r\n      this.activeConnector && (await this.activeConnector.disconnect());\r\n    } finally {\r\n      this.resetState();\r\n    }\r\n  }\r\n\r\n  private resetState() {\r\n    this.activeConnector = null;\r\n    this.accountSubscription = null;\r\n    this.chainIdSubscription = null;\r\n    this.disconnectSubscription = null;\r\n\r\n    this.txWeb3.next(null);\r\n    this.account.next(null);\r\n    this.chainId.next(null);\r\n    this.status.next('disconnected');\r\n  }\r\n\r\n  private checkOptions() {\r\n    if (\r\n      !('httpRpcUrl' in this.options.defaultProvider) &&\r\n      !('wsRpcUrl' in this.options.defaultProvider) &&\r\n      !('infuraAccessToken' in this.options.defaultProvider)\r\n    ) {\r\n      console.error(\r\n        'You need to configure one of these parameters: \"httpRpcUrl\", \"wsRpcUrl\" or \"infuraAccessToken\".',\r\n      );\r\n    }\r\n  }\r\n\r\n  private getDefaultProvider(): Web3ProvidersWs.WebsocketProvider | Web3ProvidersHttp.HttpProvider {\r\n    if ('httpRpcUrl' in this.options.defaultProvider) {\r\n      const { httpRpcUrl, options } = this.options.defaultProvider;\r\n      return new HttpProvider(httpRpcUrl, options);\r\n    }\r\n\r\n    const defaultReconnectOptions = {\r\n      auto: true,\r\n      delay: 5000,\r\n    };\r\n\r\n    if ('wsRpcUrl' in this.options.defaultProvider) {\r\n      const { wsRpcUrl, options } = this.options.defaultProvider;\r\n      return new WebsocketProvider(wsRpcUrl, {\r\n        ...options,\r\n        reconnect: {\r\n          ...defaultReconnectOptions,\r\n          ...options?.reconnect,\r\n        },\r\n      });\r\n    }\r\n\r\n    if ('infuraAccessToken' in this.options.defaultProvider) {\r\n      const { infuraAccessToken, network = 'mainnet', options } = this.options.defaultProvider;\r\n      return new WebsocketProvider(`wss://${network}.infura.io/ws/v3/${infuraAccessToken}`, {\r\n        ...options,\r\n        reconnect: {\r\n          ...defaultReconnectOptions,\r\n          ...options?.reconnect,\r\n        },\r\n      });\r\n    }\r\n\r\n    return assertNever(this.options.defaultProvider);\r\n  }\r\n\r\n  private handleAccountChange(account: string) {\r\n    this.account.next(account);\r\n  }\r\n\r\n  private handleChainIdChange(chainId: number) {\r\n    this.chainId.next(chainId);\r\n  }\r\n\r\n  private handleDisconnect() {\r\n    this.disconnect();\r\n  }\r\n}\r\n\r\nexport function assertNever(value: never): never {\r\n  throw new Error(`Unexpected value: ${value}`);\r\n}\r\n\r\nasync function getAccount(connector: Connector): Promise<string> {\r\n  const account = await connector.getAccount();\r\n\r\n  if (!account) {\r\n    throw new Error('No Ethereum accounts found, you need to create an account in your wallet');\r\n  }\r\n\r\n  return account;\r\n}\r\n\r\nasync function getChainId(connector: Connector): Promise<number> {\r\n  const chainId = await connector.getChainId();\r\n\r\n  if (!chainId) {\r\n    throw new Error('ChainID is not found, you need to choose a network in your wallet');\r\n  }\r\n\r\n  return chainId;\r\n}\r\n"],"names":["WebsocketProvider","Web3ProvidersWs","HttpProvider","Web3ProvidersHttp","Web3WalletsManager","options","this","BehaviorSubject","_extends","defaultProvider","network","checkOptions","web3","makeWeb3","getDefaultProvider","connect","bind","disconnect","handleAccountChange","handleChainIdChange","handleDisconnect","_proto","prototype","_connect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","connector","provider","account","chainId","wrap","_context","prev","next","activeConnector","status","sent","txWeb3","getAccount","getChainId","accountSubscription","subscribeConnectAccount","chainIdSubscription","subscribeChainId","disconnectSubscription","subscribeDisconnect","abrupt","t0","stop","_x","apply","arguments","_disconnect","_callee2","_context2","unsubscribe","resetState","finish","console","error","_this$options$default","httpRpcUrl","defaultReconnectOptions","auto","delay","_this$options$default2","wsRpcUrl","reconnect","_this$options$default3","_this$options$default4","infuraAccessToken","assertNever","value","Error","_x2","_getAccount","_callee3","_context3","_x3","_getChainId","_callee4","_context4"],"mappings":"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"}