{"code":"import { BehaviorSubject } from 'rxjs';\r\nimport * as Web3ProvidersWs from 'web3-providers-ws';\r\nimport * as Web3ProvidersHttp from 'web3-providers-http';\r\nexport * from './types';\r\nconst WebsocketProvider = Web3ProvidersWs;\r\nconst HttpProvider = Web3ProvidersHttp;\r\nexport class Web3WalletsManager {\r\n    constructor(options) {\r\n        this.txWeb3 = new BehaviorSubject(null);\r\n        this.account = new BehaviorSubject(null);\r\n        this.chainId = new BehaviorSubject(null);\r\n        this.status = new BehaviorSubject('disconnected');\r\n        this.activeConnector = null;\r\n        this.accountSubscription = null;\r\n        this.chainIdSubscription = null;\r\n        this.disconnectSubscription = null;\r\n        this.options = {\r\n            ...options,\r\n            defaultProvider: {\r\n                network: 'mainnet',\r\n                ...options.defaultProvider,\r\n            },\r\n        };\r\n        this.checkOptions();\r\n        this.web3 = options.makeWeb3(this.getDefaultProvider());\r\n        this.connect = this.connect.bind(this);\r\n        this.disconnect = this.disconnect.bind(this);\r\n        this.handleAccountChange = this.handleAccountChange.bind(this);\r\n        this.handleChainIdChange = this.handleChainIdChange.bind(this);\r\n        this.handleDisconnect = this.handleDisconnect.bind(this);\r\n    }\r\n    async connect(connector) {\r\n        await this.disconnect();\r\n        this.activeConnector = connector;\r\n        const { makeWeb3 } = this.options;\r\n        try {\r\n            this.status.next('pending');\r\n            const { provider } = await connector.connect();\r\n            const web3 = makeWeb3(provider);\r\n            this.txWeb3.next(web3);\r\n            const account = await getAccount(connector);\r\n            this.account.next(account);\r\n            const chainId = await getChainId(connector);\r\n            this.chainId.next(chainId);\r\n            this.accountSubscription = connector.subscribeConnectAccount(this.handleAccountChange);\r\n            this.chainIdSubscription = connector.subscribeChainId(this.handleChainIdChange);\r\n            this.disconnectSubscription = connector.subscribeDisconnect(this.handleDisconnect);\r\n            this.status.next('connected');\r\n            return { provider, account, chainId };\r\n        }\r\n        catch (error) {\r\n            this.disconnect();\r\n            throw error;\r\n        }\r\n    }\r\n    async disconnect() {\r\n        try {\r\n            this.accountSubscription && this.accountSubscription.unsubscribe();\r\n            this.chainIdSubscription && this.chainIdSubscription.unsubscribe();\r\n            this.disconnectSubscription && this.disconnectSubscription.unsubscribe();\r\n            this.activeConnector && (await this.activeConnector.disconnect());\r\n        }\r\n        finally {\r\n            this.resetState();\r\n        }\r\n    }\r\n    resetState() {\r\n        this.activeConnector = null;\r\n        this.accountSubscription = null;\r\n        this.chainIdSubscription = null;\r\n        this.disconnectSubscription = null;\r\n        this.txWeb3.next(null);\r\n        this.account.next(null);\r\n        this.chainId.next(null);\r\n        this.status.next('disconnected');\r\n    }\r\n    checkOptions() {\r\n        if (!('httpRpcUrl' in this.options.defaultProvider) &&\r\n            !('wsRpcUrl' in this.options.defaultProvider) &&\r\n            !('infuraAccessToken' in this.options.defaultProvider)) {\r\n            console.error('You need to configure one of these parameters: \"httpRpcUrl\", \"wsRpcUrl\" or \"infuraAccessToken\".');\r\n        }\r\n    }\r\n    getDefaultProvider() {\r\n        if ('httpRpcUrl' in this.options.defaultProvider) {\r\n            const { httpRpcUrl, options } = this.options.defaultProvider;\r\n            return new HttpProvider(httpRpcUrl, options);\r\n        }\r\n        const defaultReconnectOptions = {\r\n            auto: true,\r\n            delay: 5000,\r\n        };\r\n        if ('wsRpcUrl' in this.options.defaultProvider) {\r\n            const { wsRpcUrl, options } = this.options.defaultProvider;\r\n            return new WebsocketProvider(wsRpcUrl, {\r\n                ...options,\r\n                reconnect: {\r\n                    ...defaultReconnectOptions,\r\n                    ...options?.reconnect,\r\n                },\r\n            });\r\n        }\r\n        if ('infuraAccessToken' in this.options.defaultProvider) {\r\n            const { infuraAccessToken, network = 'mainnet', options } = this.options.defaultProvider;\r\n            return new WebsocketProvider(`wss://${network}.infura.io/ws/v3/${infuraAccessToken}`, {\r\n                ...options,\r\n                reconnect: {\r\n                    ...defaultReconnectOptions,\r\n                    ...options?.reconnect,\r\n                },\r\n            });\r\n        }\r\n        return assertNever(this.options.defaultProvider);\r\n    }\r\n    handleAccountChange(account) {\r\n        this.account.next(account);\r\n    }\r\n    handleChainIdChange(chainId) {\r\n        this.chainId.next(chainId);\r\n    }\r\n    handleDisconnect() {\r\n        this.disconnect();\r\n    }\r\n}\r\nexport function assertNever(value) {\r\n    throw new Error(`Unexpected value: ${value}`);\r\n}\r\nasync function getAccount(connector) {\r\n    const account = await connector.getAccount();\r\n    if (!account) {\r\n        throw new Error('No Ethereum accounts found, you need to create an account in your wallet');\r\n    }\r\n    return account;\r\n}\r\nasync function getChainId(connector) {\r\n    const chainId = await connector.getChainId();\r\n    if (!chainId) {\r\n        throw new Error('ChainID is not found, you need to choose a network in your wallet');\r\n    }\r\n    return chainId;\r\n}\r\n//# sourceMappingURL=index.js.map","references":["E:/metawallet/meta-wallets-kit/node_modules/rxjs/dist/cjs/index.js","E:/metawallet/meta-wallets-kit/node_modules/web3-providers-ws/types/index.d.ts","E:/metawallet/meta-wallets-kit/node_modules/web3-providers-http/types/index.d.ts","E:/metawallet/meta-wallets-kit/packages/types/dist/index.js","E:/metawallet/meta-wallets-kit/packages/core/src/Web3WalletsManager/types.ts","E:/metawallet/meta-wallets-kit/packages/core/src/Web3WalletsManager/types.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/Web3WalletsManager/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"E:/metawallet/meta-wallets-kit/packages/core/Web3WalletsManager/index.d.ts","writeByteOrderMark":false,"text":"import * as Web3ProvidersWs from 'web3-providers-ws';\r\nimport * as Web3ProvidersHttp from 'web3-providers-http';\r\nimport { Connector, Provider } from '@meta-wallets-kit/types';\r\nimport { ConnectResult } from './types';\r\nexport * from './types';\r\ndeclare const WebsocketProvider: typeof Web3ProvidersWs.WebsocketProvider;\r\ndeclare const HttpProvider: typeof Web3ProvidersHttp.HttpProvider;\r\ndeclare type WebsocketProviderOptions = ConstructorParameters<typeof WebsocketProvider>[1];\r\ndeclare type HttpProviderOptions = ConstructorParameters<typeof HttpProvider>[1];\r\ndeclare type InfuraNetwork = 'rinkeby' | 'kovan' | 'mainnet' | 'ropsten' | 'goerli';\r\ninterface Options<W> {\r\n    defaultProvider: OptionsOfDefaultProvider;\r\n    makeWeb3(provider: Provider): W;\r\n}\r\ndeclare type OptionsOfDefaultProvider = {\r\n    httpRpcUrl: string;\r\n    options?: HttpProviderOptions;\r\n} | {\r\n    wsRpcUrl: string;\r\n    options?: WebsocketProviderOptions;\r\n} | {\r\n    infuraAccessToken: string;\r\n    /** default: 'mainnet' */\r\n    network?: InfuraNetwork;\r\n    options?: WebsocketProviderOptions;\r\n};\r\nexport declare class Web3WalletsManager<W> {\r\n    web3: W;\r\n    txWeb3: any;\r\n    account: any;\r\n    chainId: any;\r\n    status: any;\r\n    private options;\r\n    private activeConnector;\r\n    private accountSubscription;\r\n    private chainIdSubscription;\r\n    private disconnectSubscription;\r\n    constructor(options: Options<W>);\r\n    connect(connector: Connector): Promise<ConnectResult>;\r\n    disconnect(): Promise<void>;\r\n    private resetState;\r\n    private checkOptions;\r\n    private getDefaultProvider;\r\n    private handleAccountChange;\r\n    private handleChainIdChange;\r\n    private handleDisconnect;\r\n}\r\nexport declare function assertNever(value: never): never;\r\n"}}
